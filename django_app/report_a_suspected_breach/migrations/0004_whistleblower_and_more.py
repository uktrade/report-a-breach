# Generated by Django 4.2.20 on 2025-05-28 12:40

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("sessions", "0001_initial"),
        ("report_a_suspected_breach", "0003_alter_historicaluploadeddocument_file_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="Whistleblower",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("name", models.TextField(blank=True)),
                ("email", models.EmailField(blank=True, max_length=254)),
                (
                    "email_verification",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="report_a_suspected_breach.reporteremailverification",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.RenameField(
            model_name="historicalpersonorcompany",
            old_name="breach",
            new_name="breach_report",
        ),
        migrations.RemoveField(
            model_name="personorcompany",
            name="breach",
        ),
        migrations.AddField(
            model_name="personorcompany",
            name="breach_report",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="report_a_suspected_breach.breach"
            ),
        ),
        migrations.AlterField(
            model_name="uploadeddocument",
            name="breach",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="documents",
                to="report_a_suspected_breach.breach",
            ),
        ),
        migrations.CreateModel(
            name="WhistleblowerReport",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("business_name", models.CharField(max_length=300, verbose_name="Business you work for")),
                ("when_did_you_first_suspect", models.DateField()),
                (
                    "is_the_date_accurate",
                    models.CharField(choices=[("exact", "Exact date"), ("approximate", "Approximate date")], max_length=11),
                ),
                ("unknown_sanctions_regime", models.BooleanField(blank=True, default=False)),
                ("where_were_the_goods_supplied_from", models.TextField()),
                (
                    "sanctions_regimes_breached",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255), blank=True, default=list, size=None
                    ),
                ),
                ("other_sanctions_regime", models.BooleanField(blank=True, default=False)),
                ("what_were_the_goods", models.TextField()),
                (
                    "business_registered_on_companies_house",
                    models.CharField(choices=[("yes", "Yes"), ("no", "No"), ("do_not_know", "I do not know")], max_length=11),
                ),
                (
                    "were_there_other_addresses_in_the_supply_chain",
                    models.CharField(choices=[("yes", "Yes"), ("no", "No"), ("do_not_know", "I do not know")], max_length=11),
                ),
                ("other_addresses_in_the_supply_chain", models.TextField(blank=True)),
                ("tell_us_about_the_suspected_breach", models.TextField()),
                ("session", models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="sessions.session")),
                (
                    "whistleblower",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="report_a_suspected_breach.whistleblower"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="HistoricalWhistleblowerReport",
            fields=[
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("modified_at", models.DateTimeField(blank=True, editable=False)),
                ("date_created", models.DateTimeField(blank=True, editable=False)),
                ("business_name", models.CharField(max_length=300, verbose_name="Business you work for")),
                ("when_did_you_first_suspect", models.DateField()),
                (
                    "is_the_date_accurate",
                    models.CharField(choices=[("exact", "Exact date"), ("approximate", "Approximate date")], max_length=11),
                ),
                ("unknown_sanctions_regime", models.BooleanField(blank=True, default=False)),
                ("where_were_the_goods_supplied_from", models.TextField()),
                (
                    "sanctions_regimes_breached",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255), blank=True, default=list, size=None
                    ),
                ),
                ("other_sanctions_regime", models.BooleanField(blank=True, default=False)),
                ("what_were_the_goods", models.TextField()),
                (
                    "business_registered_on_companies_house",
                    models.CharField(choices=[("yes", "Yes"), ("no", "No"), ("do_not_know", "I do not know")], max_length=11),
                ),
                (
                    "were_there_other_addresses_in_the_supply_chain",
                    models.CharField(choices=[("yes", "Yes"), ("no", "No"), ("do_not_know", "I do not know")], max_length=11),
                ),
                ("other_addresses_in_the_supply_chain", models.TextField(blank=True)),
                ("tell_us_about_the_suspected_breach", models.TextField()),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sessions.session",
                    ),
                ),
                (
                    "whistleblower",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="report_a_suspected_breach.whistleblower",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical whistleblower report",
                "verbose_name_plural": "historical whistleblower reports",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalWhistleblower",
            fields=[
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("modified_at", models.DateTimeField(blank=True, editable=False)),
                ("name", models.TextField(blank=True)),
                ("email", models.EmailField(blank=True, max_length=254)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
                (
                    "email_verification",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="report_a_suspected_breach.reporteremailverification",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "verbose_name": "historical whistleblower",
                "verbose_name_plural": "historical whistleblowers",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name="historicalpersonorcompany",
            name="whistleblower_report",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="report_a_suspected_breach.whistleblowerreport",
            ),
        ),
        migrations.AddField(
            model_name="historicaluploadeddocument",
            name="whistleblower_report",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="report_a_suspected_breach.whistleblowerreport",
            ),
        ),
        migrations.AddField(
            model_name="personorcompany",
            name="whistleblower_report",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="report_a_suspected_breach.whistleblowerreport",
            ),
        ),
        migrations.AddField(
            model_name="uploadeddocument",
            name="whistleblower_report",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="report_a_suspected_breach.whistleblowerreport",
            ),
        ),
    ]
